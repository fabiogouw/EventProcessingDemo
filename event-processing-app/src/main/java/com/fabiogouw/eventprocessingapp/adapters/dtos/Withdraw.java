/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.fabiogouw.eventprocessingapp.adapters.dtos;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Withdraw extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3739969929727401875L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Withdraw\",\"namespace\":\"com.fabiogouw.eventprocessingapp.adapters.dtos\",\"fields\":[{\"name\":\"correlationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Id of the whole operation.\"},{\"name\":\"accountFrom\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Id of the account we will make a debit.\"},{\"name\":\"amount\",\"type\":\"double\",\"doc\":\"Money to be withdrawn.\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Withdraw> ENCODER =
      new BinaryMessageEncoder<Withdraw>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Withdraw> DECODER =
      new BinaryMessageDecoder<Withdraw>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Withdraw> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Withdraw> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Withdraw>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Withdraw to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Withdraw from a ByteBuffer. */
  public static Withdraw fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the whole operation. */
  @Deprecated public java.lang.String correlationId;
  /** Id of the account we will make a debit. */
  @Deprecated public java.lang.String accountFrom;
  /** Money to be withdrawn. */
  @Deprecated public double amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Withdraw() {}

  /**
   * All-args constructor.
   * @param correlationId Id of the whole operation.
   * @param accountFrom Id of the account we will make a debit.
   * @param amount Money to be withdrawn.
   */
  public Withdraw(java.lang.String correlationId, java.lang.String accountFrom, java.lang.Double amount) {
    this.correlationId = correlationId;
    this.accountFrom = accountFrom;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return correlationId;
    case 1: return accountFrom;
    case 2: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: correlationId = (java.lang.String)value$; break;
    case 1: accountFrom = (java.lang.String)value$; break;
    case 2: amount = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return Id of the whole operation.
   */
  public java.lang.String getCorrelationId() {
    return correlationId;
  }

  /**
   * Sets the value of the 'correlationId' field.
   * Id of the whole operation.
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.String value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'accountFrom' field.
   * @return Id of the account we will make a debit.
   */
  public java.lang.String getAccountFrom() {
    return accountFrom;
  }

  /**
   * Sets the value of the 'accountFrom' field.
   * Id of the account we will make a debit.
   * @param value the value to set.
   */
  public void setAccountFrom(java.lang.String value) {
    this.accountFrom = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return Money to be withdrawn.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * Money to be withdrawn.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Creates a new Withdraw RecordBuilder.
   * @return A new Withdraw RecordBuilder
   */
  public static com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder newBuilder() {
    return new com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder();
  }

  /**
   * Creates a new Withdraw RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Withdraw RecordBuilder
   */
  public static com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder newBuilder(com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder other) {
    return new com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder(other);
  }

  /**
   * Creates a new Withdraw RecordBuilder by copying an existing Withdraw instance.
   * @param other The existing instance to copy.
   * @return A new Withdraw RecordBuilder
   */
  public static com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder newBuilder(com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw other) {
    return new com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder(other);
  }

  /**
   * RecordBuilder for Withdraw instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Withdraw>
    implements org.apache.avro.data.RecordBuilder<Withdraw> {

    /** Id of the whole operation. */
    private java.lang.String correlationId;
    /** Id of the account we will make a debit. */
    private java.lang.String accountFrom;
    /** Money to be withdrawn. */
    private double amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountFrom)) {
        this.accountFrom = data().deepCopy(fields()[1].schema(), other.accountFrom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Withdraw instance
     * @param other The existing instance to copy.
     */
    private Builder(com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountFrom)) {
        this.accountFrom = data().deepCopy(fields()[1].schema(), other.accountFrom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'correlationId' field.
      * Id of the whole operation.
      * @return The value.
      */
    public java.lang.String getCorrelationId() {
      return correlationId;
    }

    /**
      * Sets the value of the 'correlationId' field.
      * Id of the whole operation.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder setCorrelationId(java.lang.String value) {
      validate(fields()[0], value);
      this.correlationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * Id of the whole operation.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * Id of the whole operation.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountFrom' field.
      * Id of the account we will make a debit.
      * @return The value.
      */
    public java.lang.String getAccountFrom() {
      return accountFrom;
    }

    /**
      * Sets the value of the 'accountFrom' field.
      * Id of the account we will make a debit.
      * @param value The value of 'accountFrom'.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder setAccountFrom(java.lang.String value) {
      validate(fields()[1], value);
      this.accountFrom = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountFrom' field has been set.
      * Id of the account we will make a debit.
      * @return True if the 'accountFrom' field has been set, false otherwise.
      */
    public boolean hasAccountFrom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountFrom' field.
      * Id of the account we will make a debit.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder clearAccountFrom() {
      accountFrom = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Money to be withdrawn.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * Money to be withdrawn.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder setAmount(double value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Money to be withdrawn.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * Money to be withdrawn.
      * @return This builder.
      */
    public com.fabiogouw.eventprocessingapp.adapters.dtos.Withdraw.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Withdraw build() {
      try {
        Withdraw record = new Withdraw();
        record.correlationId = fieldSetFlags()[0] ? this.correlationId : (java.lang.String) defaultValue(fields()[0]);
        record.accountFrom = fieldSetFlags()[1] ? this.accountFrom : (java.lang.String) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Withdraw>
    WRITER$ = (org.apache.avro.io.DatumWriter<Withdraw>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Withdraw>
    READER$ = (org.apache.avro.io.DatumReader<Withdraw>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
